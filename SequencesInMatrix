using System;
using System.Collections.Generic;

class SequencesInMatrix
{
    static void byMainDiagonal(string[,] matrix,ref int bestCount,ref string bestText)
    {
        int count = 1;
        for (int rows = 0; rows < matrix.GetLength(0) - 2; rows++)  
        {
            for (int row = rows, col = 0; row < matrix.GetLength(0) - 1; row++, col++)
            {
                if ((row == matrix.GetLength(0) - 1) || (col == matrix.GetLength(1) - 1)) break;
                if (matrix[row, col] == matrix[row + 1, col + 1])
                {
                    count++;
                    if (count > bestCount)
                    {
                        bestCount = count;
                        bestText = matrix[row, col];
                    }
                }
                else count = 1;
            }
            count = 1;
        }
        for (int cols = 1; cols < matrix.GetLength(0) - 2; cols++)  
        {
            for (int row = 0, col = cols; row < matrix.GetLength(0) - 1; row++, col++)
            {
                if ((row == matrix.GetLength(0) - 1) || (col == matrix.GetLength(1) - 1)) break;
                if (matrix[row, col] == matrix[row + 1, col + 1])
                {
                    count++;
                    if (count > bestCount)
                    {
                        bestCount = count;
                        bestText = matrix[row, col];
                    }
                }
                else count = 1;
            }
            count = 1;
        }
    }
    static void bySecondDiagonal(string[,] matrix,ref int bestCount,ref string bestText)
    {
        int count = 1;
        for (int rows = 0; rows < matrix.GetLength(0) - 1; rows++) 
        {
            for (int row = rows, col = matrix.GetLength(1) - 1; row < matrix.GetLength(0) - 1; row++, col--)
            {
                if ((row == matrix.GetLength(0) - 1) || (col == 0)) break;
                if (matrix[row, col] == matrix[row + 1, col - 1])
                {
                    count++;
                    if (count > bestCount)
                    {
                        bestCount = count;
                        bestText = matrix[row, col];
                    }
                }
                else count = 1;
            }
            count = 1;
        }
        for (int cols = matrix.GetLength(1) - 2; cols >= 1; cols--)  
        {
            for (int row = 0, col = cols; row < matrix.GetLength(0) - 1; row++, col--)
            {
                if ((row == matrix.GetLength(0) - 1) || (col == 0)) break;
                if (matrix[row, col] == matrix[row + 1, col - 1])
                {
                    count++;
                    if (count > bestCount)
                    {
                        bestCount = count;
                        bestText = matrix[row, col];
                    }
                }
                else count = 1;
            }
            count = 1;
        }
    }
    static void byRows(string[,] matrix, out int bestCount, out string bestText)
    {
        int count = 1;
        bestCount = 1;
        bestText = "";
        for (int row = 0; row < matrix.GetLength(0); row++)
        {
            for (int col = 0; col < matrix.GetLength(1) - 1; col++)
            {
                for (int i = col; i < matrix.GetLength(1) - 1; i++)
                {
                    if (matrix[row, i] == matrix[row, i + 1]) count++;
                    else break;
                }
                if (count > bestCount)
                {
                    bestCount = count;
                    bestText = matrix[row, col];
                }
                count = 1;
            }
        }
    }
    static void byColumns(string[,] matrix, ref int bestCount, ref string bestText)
    {
        int count = 1; ;
        for (int col = 0; col < matrix.GetLength(1); col++)
        {
            for (int row = 0; row < matrix.GetLength(0) - 1; row++)
            {
                for (int i = row; i < matrix.GetLength(0) - 1; i++)
                {
                    if (matrix[i, col] == matrix[i + 1, col]) count++;
                    else break;
                }
                if (count > bestCount)
                {
                    bestCount = count;
                    bestText = matrix[row, col];
                }
                count = 1;
            }
        }
    }
    static void Main()
    {
        string[,] matrix = new string[,] {
            {"ha", "fifi", "ho", "hi"},
            {"fo", "ha", "hi", "xx"},
            {"xxx", "ho", "ha", "xx"}
        };
        Console.WriteLine("The matrix is:");
        Console.WriteLine("----------------------------------");
        for (int row = 0; row < matrix.GetLength(0); row++)
        {
            for (int col = 0; col < matrix.GetLength(1); col++)
            {
                Console.Write("{0,7} ", matrix[row, col]);
            }
            Console.WriteLine();
            Console.WriteLine();
        }
        int bestCount = 0;
        string bestText = "";
        byRows(matrix, out bestCount, out bestText);
        byColumns(matrix, ref bestCount, ref bestText);
        byMainDiagonal(matrix, ref bestCount, ref bestText);
        bySecondDiagonal(matrix, ref bestCount,ref bestText);
        Console.WriteLine("The longest sequence of equal strings is ({0}) and it is repeat {1} times", bestText, bestCount);
    }
}
